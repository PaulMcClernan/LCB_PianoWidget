/**
Widget is a virtual mouse piano

Description:
This widget allows for creation of scalable piano controls


Name: noteOn

Type: message

Syntax: noteOn <pNoteNum>, <pNoteName>

OS: mac,ios,android,win

Platforms: desktop,mobile

Summary: Sent when a key on the piano set to it's 'on' state.

Example:
on noteOn pNoteNum,pNoteName
	put "noteOn " & pNoteNum && pNoteName
end noteOn

Parameters:

pNoteNum: The MIDI note number(s) of the note key (exp. 63), this can be an item delimited list of multiple key numbers (chords)

pNoteName: The Name of the note key (exp. D#Eb), this can be an item delimited list of multiple key numbers (chords)

Description:
Handle the <noteOn> message in the widget's object script to respond to
'note down' clicks on the piano's individual note keys.


Name: noteOff

Type: message

Syntax: noteOff <pNoteNum>, <pNoteName>

OS: mac,ios,android,win

Platforms: desktop,mobile

Summary: Sent when a key on the piano released from it's 'on' state.

Example:
on noteOff pNoteNum,pNoteName
	put "noteOff " & pNoteNum && pNoteName
end noteOff

Parameters:

pNoteNum:The MIDI note number(s) of the note key (exp. 63), this can be an item delimited list of multiple key numbers (chords)

pNoteName: The Name of the note key (exp. D#Eb), this can be an item delimited list of multiple key names (chords)

Description:
Handle the <noteOff> message in the widget's object script to respond to
'note release' messages from the piano's individual note keys.

*/

-- declaring extension as widget, followed by identifier
widget community.livecode.widget.piano

-- dependancy declarations
use com.livecode.canvas
use com.livecode.string
use com.livecode.char
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "Piano Widget"
metadata author is "Paul McClernan, Bernd Niggemann"
metadata version is "0.8"
metadata preferredSize is "1000,100"
metadata svgicon is "M0,0v69.6c0,1.4,1.1,2.5,2.4,2.5h9.7c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1 c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.7 c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.7c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1H94c1.3,0,2.4-1.1,2.4-2.5V0H0z M95.4,69.6c0,0.8-0.6,1.5-1.4,1.5h-9.8c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1L95.4,69.6z M80.4,71.1h-9.7 c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.6v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C81.8,70.4,81.2,71.1,80.4,71.1z M57,71.1c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5 L57,71.1z M53.1,71.1h-9.8c-0.8,0-1.4-0.7-1.4-1.5V1H50v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C54.5,70.4,53.8,71.1,53.1,71.1z M28.3,69.6V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1v68.6c0,0.8-0.6,1.5-1.4,1.5h-9.8C28.9,71.1,28.3,70.4,28.3,69.6z M14.7,69.6V46.9 h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.6l0,0v0.3c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5H16C15.3,71.1,14.7,70.4,14.7,69.6z M12.1,71.1H2.4c-0.8,0-1.4-0.7-1.4-1.5V1h8.1v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C13.5,70.4,12.9,71.1,12.1,71.1z"

-----------------------------------------------------------------------------------------------  Properties --------------------------------------------------------------------------------------
property hilightedNotes get getHilightedNotes set setHilightedNotes
metadata hilightedNotes.user_visible is "false"
private variable mhilightedNotes as String
private handler setHilightedNotes(pHilightNotes) returns nothing
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
   variable tWhiteKey as Array
   variable tNumStr as String
   variable tKeysList as List
   variable tKey as optional any
   variable tKeyIteration as Number
   variable tOctaveIteration as Number
   ------------------------------------------------------------------------ Clear All Hilights First ------------------------------------------------------------------------
   repeat with tOctaveIteration from 1 up to 11
      put element tOctaveIteration of mOctaveList into tOctave
      put tOctave["OctaveBlackKeysList"] into tBlackKeysList
      repeat with tKeyIteration from 1 up to 5
         put element tKeyIteration of tBlackKeysList into tBlackKey
         put false into tBlackKey["KeyHighlighted"]
         put tBlackKey into element tKeyIteration of tBlackKeysList
      end repeat
      put tBlackKeysList into tOctave["OctaveBlackKeysList"]
      put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
      repeat with tKeyIteration from 1 up to 7
         put element tKeyIteration of tWhiteKeysList into tWhiteKey
         put false into tWhiteKey["KeyHighlighted"]
         put tWhiteKey into element tKeyIteration of tWhiteKeysList
      end repeat
      put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
      put tOctave into element tOctaveIteration of mOctaveList
   end repeat

   split pHilightNotes by "," into tKeysList
   -- log tKeysList

   repeat for each element tKey in tKeysList
      --- check if it's a sharp without flat or flat
      if the number of chars in tKey > 1 then
         if (char 2 of tKey is "#" and char 2 of tKey is not "b")  or (char 2 of tKey is "b") then
            if (char -1 of tKey) parsed as number is not nothing then
               repeat forever
                  if the last char of tKey is in "-012356789" then
                     put the last char of tKey before tNumStr
                     delete the last char of tKey
                  else
                     exit repeat
                  end if
               end repeat
            end if
            put getSharpOrFlatToSharpAndFlat(tKey) into tKey
            put tKey & tNumStr into tKey
            -- log tKey
         end if
      end if
      repeat with tOctaveIteration from 1 up to 11
         put element tOctaveIteration of mOctaveList into tOctave
         put tOctave["OctaveBlackKeysList"] into tBlackKeysList
         repeat with tKeyIteration from 1 up to 5
            put element tKeyIteration of tBlackKeysList into tBlackKey
            if tBlackKey["KeyName"] is tKey then
               put true into tBlackKey["KeyHighlighted"]
               put tBlackKey into element tKeyIteration of tBlackKeysList
            else if (tBlackKey["KeyName"] & tOctave["OctaveName"]) is tKey then
                  put true into tBlackKey["KeyHighlighted"]
                  put tBlackKey into element tKeyIteration of tBlackKeysList
            else if tBlackKey["KeyNumber"] is tKey parsed as number then
               put true into tBlackKey["KeyHighlighted"]
               put tBlackKey into element tKeyIteration of tBlackKeysList
            end if
         end repeat
         put tBlackKeysList into tOctave["OctaveBlackKeysList"]

         put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
         repeat with tKeyIteration from 1 up to 7
            put element tKeyIteration of tWhiteKeysList into tWhiteKey
            if tWhiteKey["KeyName"] is tKey then
               put true into tWhiteKey["KeyHighlighted"]
               put tWhiteKey into element tKeyIteration of tWhiteKeysList
            else if tWhiteKey["KeyName"] & tOctave["OctaveName"] is tKey then
               put true into tWhiteKey["KeyHighlighted"]
               put tWhiteKey into element tKeyIteration of tWhiteKeysList
            else if tWhiteKey["KeyNumber"] is tKey parsed as number then
               put true into tWhiteKey["KeyHighlighted"]
               put tWhiteKey into element tKeyIteration of tWhiteKeysList
            end if
         end repeat
         put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]

         put tOctave into element tOctaveIteration of mOctaveList
      end repeat
   end repeat
   redraw all
end handler

public handler getSharpOrFlatToSharpAndFlat(in pKey as String) returns String
   variable tVarListA as List
   variable tVarListB as List
   variable tOffset as Number
	put ["C#",  "D#",  "F#",  "G#",  "A#",  "Db",  "Eb",  "Gb",  "Ab",  "Bb"] into tVarListA
   put ["C#Db","D#Eb","F#Gb","G#Ab","A#Bb","C#Db","D#Eb","F#Gb","G#Ab","A#Bb"] into tVarListB
   put the index of pKey in tVarListA into tOffset
   -- log tOffset
   if tOffset > 0 then
      return element tOffset of tVarListB
   else
      return pKey
   end if
end handler

private handler getHilightedNotes() returns String
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
   variable tWhiteKey as Array
   variable tPath as Path
   variable tNamesString as String
   variable tNoteNumsString as String
   variable tOctaveIteration as Number
   put "" into tNamesString
   put "" into tNoteNumsString
   repeat with tOctaveIteration from 1 up to 11
      put element (tOctaveIteration) of mOctaveList into tOctave
      put tOctave["OctaveBlackKeysList"] into tBlackKeysList
      repeat for each element tBlackKey in tBlackKeysList
         if tBlackKey["KeyHighlighted"] is true then
            put tBlackKey["KeyNumber"] formatted as string & "," after tNoteNumsString
            put tBlackKey["KeyName"] & tOctave["OctaveName"] & "," after tNamesString
         end if
      end repeat
      put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
      repeat for each element tWhiteKey in tWhiteKeysList
         if tWhiteKey["KeyHighlighted"] is true then
            put tWhiteKey["KeyNumber"] formatted as string & "," after tNoteNumsString
            put tWhiteKey["KeyName"] & tOctave["OctaveName"] & "," after tNamesString
         end if
      end repeat
   end repeat
   if tNamesString is not the empty string then
      if the last char of tNamesString is "," then
         delete the last char of tNamesString
      end if
   end if
   if tNoteNumsString is not the empty string then
      if the last char of tNoteNumsString is "," then
         delete the last char of tNoteNumsString
      end if
   end if
   return tNoteNumsString &"\n"& tNamesString
end handler

property octaves  get getOctaveAmount  set setOctaveAmount
metadata octaves.editor is "com.livecode.pi.enum"
metadata octaves.options is "1,2,3,4,5,6,7,8,9,10,11"
metadata octaves.default is "11"
metadata octaves.label is "Octaves Amount"
private variable mOctavesStr as String
private variable mOctaves as Integer
public handler setOctaveAmount(in pOctavesStr as String) returns nothing
   put pOctavesStr into mOctavesStr
	put (pOctavesStr parsed as number) into mOctaves
   OnGeometryChanged()
   redraw all
end handler
public handler getOctaveAmount() returns String
   return mOctavesStr
end handler

property chordFormula get getChordFormula  set setChordFormula
metadata chordFormula.editor is "com.livecode.pi.string"
metadata chordFormula.default is ""
metadata chordFormula.label is "Chord Formula"
public variable mChordFormula as String

property chordPreset get getChordPreset set setChordPreset
metadata chordPreset.editor is "com.livecode.pi.enum"
metadata chordPreset.options is "...,+Octave,-Octave,-Octave+Octave,PowerChord,Major Triad,Minor Triad,Minor 7th,Major 7th"
metadata chordPreset.default is "None"
metadata chordPreset.label is "Chord Presets"
public variable mChordPreset as String

private handler setChordFormula(in pChordFormula as String) returns nothing
   put pChordFormula into mChordFormula
   if mChordPreset is not "..." then
      put "..." into mChordPreset
   end if
   OnGeometryChanged()
   redraw all
end handler
public handler getChordFormula() returns String
   return mChordFormula
end handler
private handler setChordPreset(in pChordPreset as String) returns nothing
   if pChordPreset is "..." then
      put pChordPreset into mChordPreset
      setChordFormula("")
   end if
   if pChordPreset is "+Octave" then
      put pChordPreset into mChordPreset
      setChordFormula("12")
   end if
   if pChordPreset is "-Octave" then
      put pChordPreset into mChordPreset
      setChordFormula("-12")
   end if
   if pChordPreset is "-Octave+Octave" then
      put pChordPreset into mChordPreset
      setChordFormula("-12,12")
   end if
   if pChordPreset is "PowerChord" then
      put pChordPreset into mChordPreset
      setChordFormula("7,12")
   end if
   if pChordPreset is "Major Triad" then
      put pChordPreset into mChordPreset
      setChordFormula("4,7")
   end if
   if pChordPreset is "Minor Triad" then
      put pChordPreset into mChordPreset
      setChordFormula("3,7")
   end if
   if pChordPreset is "Major 7th" then
      put pChordPreset into mChordPreset
      setChordFormula("4,7,11")
   end if
   if pChordPreset is "Minor 7th" then
      put pChordPreset into mChordPreset
      setChordFormula("3,7,11")
   end if
   OnGeometryChanged()
   redraw all
end handler
public handler getChordPreset() returns String
   return mChordPreset
end handler

property hiliteColor   get getHiliteColor   set setHiliteColor
metadata hiliteColor.editor is "com.livecode.pi.color"
private variable mHiliteColor as Color
public handler setHiliteColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mHiliteColor
   OnGeometryChanged()
   redraw all
end handler
public handler getHiliteColor() returns String
	return colorToString(mHiliteColor, false)
end handler

property strokeWidth   get getStroke   set setStroke
metadata strokeWidth.editor is "com.livecode.pi.number"
metadata strokeWidth.label is "Stroke Width"
private variable mStrokeSizeStr as Number
private variable mStrokeSize as Number
public handler setStroke(in pStrokeSize as Number) returns nothing
   put pStrokeSize into mStrokeSize
   OnGeometryChanged()
   redraw all
end handler
public handler getStroke() returns Number
	return mStrokeSize
end handler

public handler OnStopEditing()
   trigger all
   OnGeometryChanged()
   redraw all
end handler
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as Array)
	-- put colorToString(mColor, true) into rProperties["color"]
end handler
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as Array)
	-- put stringToColor(pProperties["color"]) into mColor
   -- put stringToColor(pProperties["hilite color"]) into mHiliteColor
end handler

private variable mBlackKeysList as List
private variable mWhiteKeysList as List
private variable mSelectedKeyList as optional List
private variable mSelectedKey as optional Array
private variable mOctaveList as List

-----------------------------------------------------------------------------------------------  Mouse Handlers --------------------------------------------------------------------------------------
public variable mPianoMouseButtonDown as Boolean

public handler OnMouseUp()
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
   variable tWhiteKey as Array
   variable tPath as Path
   variable tIndex as Number
   variable tNotesNumsOff as List
   put false into  mPianoMouseButtonDown
   if mSelectedKey is not nothing then
      if mSelectedKey["keycolor"] is "black" then
         put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tNotesNumsOff
         put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
         post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tNotesNumsOff, mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tNotesNumsOff ]
         put tOctave["OctaveBlackKeysList"] into tBlackKeysList
         put element (mSelectedKey["index"]) of tBlackKeysList into tBlackKey
         put false into tBlackKey["KeyHighlighted"]
         put tBlackKey into element mSelectedKey["index"] of tBlackKeysList
         put tBlackKeysList into tOctave["OctaveBlackKeysList"]
         put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
      else
         put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tNotesNumsOff
         put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
         post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tNotesNumsOff, mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tNotesNumsOff ]
         put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
         put element mSelectedKey["index"] of tWhiteKeysList into tWhiteKey
         put false into tWhiteKey["KeyHighlighted"]
         put tWhiteKey into element mSelectedKey["index"] of tWhiteKeysList
         put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
         put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
      end if
      put nothing into mSelectedKey
      redraw all
   end if
  post "mouseUp" with [the click button] --  to my script object with [the click button]
end handler

public handler OnMouseDown()
   variable tOctaveCounter as Number
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
   variable tWhiteKey as Array
   variable tPath as Path
   variable tIndex as Number
   variable tChordNotes as List

   put true into mPianoMouseButtonDown
   if mSelectedKey is not nothing then
      put mSelectedKey["KeyPath"] into tPath
      if hitTestPath( the mouse position, tPath, 0, true) is false then
         if mSelectedKey["keycolor"] is "black" then
            put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tChordNotes
            put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
            post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tChordNotes, mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes ]
            put tOctave["OctaveBlackKeysList"] into tBlackKeysList
            put element mSelectedKey["index"] of tBlackKeysList into tBlackKey
            put false into tBlackKey["KeyHighlighted"]
            put tBlackKey into element mSelectedKey["index"] of tBlackKeysList
            put tBlackKeysList into tOctave["OctaveBlackKeysList"]
            put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
         else
            put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tChordNotes
            put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
            post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tChordNotes, mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes ]
            put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
            put element mSelectedKey["index"] of tWhiteKeysList into tWhiteKey
            put false into tWhiteKey["KeyHighlighted"]
            put tWhiteKey into element mSelectedKey["index"] of tWhiteKeysList
            put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
            put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
         end if
         put nothing into mSelectedKey
      end if
   end if
   repeat with tOctaveCounter from 1 up to mOctaves
      put element tOctaveCounter of mOctaveList into tOctave

      put tOctave["OctaveBlackKeysList"] into tBlackKeysList
      repeat with tIndex from 1 up to 5
         put element tIndex of tBlackKeysList into tBlackKey
         put tBlackKey["KeyPath"] into tPath
         if hitTestPath( the mouse position, tPath, 0, true) then
         -- if (the mouse position is within the bounding box of tPath) then
            put highlightChordFormula(tBlackKey["KeyNumber"]) into tChordNotes
            post "noteOn" with [ tBlackKey["KeyNumber"] formatted as string & element 1 of tChordNotes,tBlackKey["KeyName"]&tOctave["OctaveName"]& element 2 of tChordNotes]
            put true into tBlackKey["KeyHighlighted"]
            put tBlackKey into element tIndex of tBlackKeysList
            put tBlackKey into mSelectedKey
            put tIndex into mSelectedKey["index"]
            put "black" into mSelectedKey["keycolor"]
            put tOctaveCounter into mSelectedKey["OctaveNumber"]
         else
           put false into tBlackKey["KeyHighlighted"]
           put tBlackKey into element tIndex of tBlackKeysList
         end if
      end repeat
      put tBlackKeysList into tOctave["OctaveBlackKeysList"]

      put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
      repeat with tIndex from 1 up to 7
         put element tIndex of tWhiteKeysList into tWhiteKey
         put tWhiteKey["KeyPath"] into tPath
         if hitTestPath( the mouse position, tPath, 0, true) then
            put highlightChordFormula(tWhiteKey["KeyNumber"]) into tChordNotes
            post "noteOn" with [ tWhiteKey["KeyNumber"] formatted as string & element 1 of tChordNotes,tWhiteKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes]
            put true into tWhiteKey["KeyHighlighted"]
            put tWhiteKey into element tIndex of tWhiteKeysList
            put tWhiteKey into mSelectedKey
            put tIndex into mSelectedKey["index"]
            put "white" into mSelectedKey["keycolor"]
            put tOctaveCounter into mSelectedKey["OctaveNumber"]
         else
            put false into tWhiteKey["KeyHighlighted"]
            put tWhiteKey into element tIndex of tWhiteKeysList
         end if
      end repeat
      put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]

      put tOctave into element tOctaveCounter of mOctaveList
   end repeat
   if mSelectedKey is not nothing then
      highlightChordFormula(mSelectedKey["KeyNumber"])
   end if
	redraw all
   post "mouseDown" with [the click button] --- to my script object with [the click button]
end handler

public handler OnMouseMove()
   if mPianoMouseButtonDown then
      variable tOctaveCounter as Number
      variable tOctave as Array
      variable tBlackKeysList as List
      variable tBlackKey as Array
      variable tWhiteKeysList as List
      variable tWhiteKey as Array
      variable tPath as Path
      variable tIndex as Number
      variable tNum as Number
      variable tChordNotes as List

      variable tSameSelectedKey as Boolean -- Bernd (BN) added contidtional check to cut down on redraws
      if mSelectedKey is not nothing then
         put mSelectedKey["KeyPath"] into tPath
       put hitTestPath( the mouse position, tPath, 0, true) into tSameSelectedKey
      end if
      if mSelectedKey is not nothing and not tSameSelectedKey then -- added tSameSelectedKey
         put mSelectedKey["KeyPath"] into tPath
         if hitTestPath( the mouse position, tPath, 0, true) is false then
            if mSelectedKey["keycolor"] is "black" then
               put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
               put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tChordNotes
               post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tChordNotes,mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes]
               put tOctave["OctaveBlackKeysList"] into tBlackKeysList
               put element mSelectedKey["index"] of tBlackKeysList into tBlackKey
               put false into tBlackKey["KeyHighlighted"]
               put tBlackKey into element mSelectedKey["index"] of tBlackKeysList
               put tBlackKeysList into tOctave["OctaveBlackKeysList"]
               put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
            else
               put element mSelectedKey["OctaveNumber"] of mOctaveList into tOctave
               put unhighlightChordFormula(mSelectedKey["KeyNumber"]) into tChordNotes
               post "noteOff" with [ mSelectedKey["KeyNumber"] formatted as string & element 1 of tChordNotes,mSelectedKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes]
               put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
               put element mSelectedKey["index"] of tWhiteKeysList into tWhiteKey
               put false into tWhiteKey["KeyHighlighted"]
               put tWhiteKey into element mSelectedKey["index"] of tWhiteKeysList
               put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
               put tOctave into element mSelectedKey["OctaveNumber"] of mOctaveList
            end if
            put nothing into mSelectedKey
         end if
      end if
      if not tSameSelectedKey then -- added
         repeat with tOctaveCounter from 1 up to mOctaves
            put element tOctaveCounter of mOctaveList into tOctave
            put tOctave["OctaveBlackKeysList"] into tBlackKeysList
            repeat with tIndex from 1 up to 5
               put element tIndex of tBlackKeysList into tBlackKey
               put tBlackKey["KeyPath"] into tPath
               if hitTestPath( the mouse position, tPath, 0, true) then
               -- if (the mouse position is within the bounding box of tPath) then --- causes potentialy multiple positive results (hiliting multiple keys for one point)
                  put highlightChordFormula(tBlackKey["KeyNumber"]) into tChordNotes
                  post "noteOn" with [ tBlackKey["KeyNumber"] formatted as string & element 1 of tChordNotes,tBlackKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes]
                   put true into tBlackKey["KeyHighlighted"]
                   put tBlackKey into element tIndex of tBlackKeysList
                   put tBlackKey into mSelectedKey
                   put tIndex into mSelectedKey["index"]
                   put "black" into mSelectedKey["keycolor"]
                   put tOctaveCounter into mSelectedKey["OctaveNumber"]
               else
                 put false into tBlackKey["KeyHighlighted"]
                 put tBlackKey into element tIndex of tBlackKeysList
               end if
            end repeat
            put tBlackKeysList into tOctave["OctaveBlackKeysList"]

            put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
            repeat with tIndex from 1 up to 7
               put element tIndex of tWhiteKeysList into tWhiteKey
               put tWhiteKey["KeyPath"] into tPath
               if hitTestPath( the mouse position, tPath, 0, true) then
                  put highlightChordFormula(tWhiteKey["KeyNumber"]) into tChordNotes
                  post "noteOn" with [ tWhiteKey["KeyNumber"] formatted as string & element 1 of tChordNotes,tWhiteKey["KeyName"]&tOctave["OctaveName"] & element 2 of tChordNotes]
                  put true into tWhiteKey["KeyHighlighted"]
                  put tWhiteKey into element tIndex of tWhiteKeysList
                  put tWhiteKey into mSelectedKey
                  put tIndex into mSelectedKey["index"]
                  put "white" into mSelectedKey["keycolor"]
                  put tOctaveCounter into mSelectedKey["OctaveNumber"]
               else
                  put false into tWhiteKey["KeyHighlighted"]
                  put tWhiteKey into element tIndex of tWhiteKeysList
               end if
            end repeat
            put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
            put tOctave into element tOctaveCounter of mOctaveList
         end repeat
         if mSelectedKey is not nothing then
           highlightChordFormula(mSelectedKey["KeyNumber"])
         end if
         redraw all
      end if
   end if
end handler

public handler OnMouseCancel()
      -- put false into gPianoMouseButtonDown
      --- execute script "global gPianoMouseButtonDown ; put false into gPianoMouseButtonDown"
	--redraw all
end handler

public handler OnMouseEnter()
   --put false into gPianoMouseButtonDown
   --execute script "global gPianoMouseButtonDown ; return gPianoMouseButtonDown"
   --put the result into gPianoMouseButtonDown
end handler

--- Monte's point-within-path handler:
public handler hitTestPath(in pPoint as Point, in pPath as Path, in pStrokeWidth as Number, in pWithin as Boolean) returns Boolean
	-- set pWithin true and pStrokeWidth to 0 if you want to hit-test the filled path
	-- set pWithin false and pStrokeWidth != 0 if you want hit-test the stroked path (i.e. just the outline)
	-- set pWithin true and pStrokeWidth != 0 if you want to hit-test the stroked and filled path.
	------------------------------------------------------------------------------------------------------------------------------
	-- create a 1 x 1 canvas
	variable tCanvas as Canvas
	put a new canvas with size [1,1] into tCanvas
	-- ensure we either get pixels drawn with our color or not drawn
	set the antialias of tCanvas to false
	-- translate the path by the point
	translate pPath by [-(the x of pPoint), -(the y of pPoint)]
	-- draw the path to the canvas
	set the paint of tCanvas to solid paint with color [0.0, 0.0, 0.0, 1.0]
	if pStrokeWidth is 0 and not pWithin then
		put 1 into pStrokeWidth
	end if
	if pWithin then
		fill pPath on tCanvas
	end if
	if pStrokeWidth > 0 then
		set the stroke width of tCanvas to pStrokeWidth
		stroke pPath on tCanvas
	end if
	-- get the pixel data of the canvas
	variable tData as Data
	put the pixel data of tCanvas into tData
	-- return whether pixel is opaque
	return the first byte of tData is the byte with code 255
end handler

public handler unhighlightChordFormula(in pKeyNum as Integer) returns optional any
   variable tListOfString as List
   variable tListOfNum as List
   variable tChordNoteNums as List
   variable tKeysList as List
   variable tKey as Array
   variable tNum as Number
   variable tOctNum as Number
   variable tOctave as Array
   variable tCounter as Number
   variable tNoteNumsOff as String
   variable tNoteNamesOff as String
   variable tNotesOff as List
   split mChordFormula by "," into tListOfString
   put tListOfString parsed as list of number into tListOfNum
   repeat for each element tNum in tListOfNum
      if pKeyNum + tNum < 128 and pKeyNum + tNum > -1 then
         push pKeyNum + tNum onto tChordNoteNums
      end if
   end repeat
   repeat for each element tNum in tChordNoteNums
      put getOctaveFromNoteNumber(tNum) into tOctNum
      put element tOctNum of mOctaveList into tOctave
      if tNum is in tOctave["OctaveBlackKeysIndex"] then
         put tOctave["OctaveBlackKeysList"] into tKeysList
         repeat with tCounter from 1 up to 5
            put element tCounter of tKeysList into tKey
            if tKey["KeyNumber"] is tNum then
               put "," &  tKey["KeyName"] & tOctave["OctaveName"] after tNoteNamesOff
               put "," & tKey["KeyNumber"] formatted as string after tNoteNumsOff
               put false into tKey["KeyHighlighted"]
               put tKey into element tCounter of tKeysList
            end if
         end repeat
         put tKeysList into tOctave["OctaveBlackKeysList"]
         put tOctave into element tOctNum of mOctaveList
         redraw all
      else
         if tNum is in tOctave["OctaveWhiteKeysIndex"] then
            put tOctave["OctaveWhiteKeysList"] into tKeysList
            repeat with tCounter from 1 up to 7
               put tKeysList[tCounter] into tKey
               if tKey["KeyNumber"] is tNum then
                  put "," &  tKey["KeyName"] & tOctave["OctaveName"] after tNoteNamesOff
                  put "," & tKey["KeyNumber"] formatted as string after tNoteNumsOff
                  put false into tKey["KeyHighlighted"]
                  put tKey into tKeysList[tCounter]
               end if
            end repeat
            put tKeysList into tOctave["OctaveWhiteKeysList"]
            put tOctave into element tOctNum of mOctaveList
         end if
      end if
   end repeat
   push tNoteNumsOff onto tNotesOff
   push tNoteNamesOff onto tNotesOff
   return tNotesOff
end handler

public handler highlightChordFormula(in pKeyNum as Integer) returns optional any
   variable tListOfString as List
   variable tListOfNum as List
   variable tChordNoteNums as List
   variable tKeysList as List
   variable tKey as Array
   variable tNum as Number
   variable tOctNum as Number
   variable tOctave as Array
   variable tCounter as Number
   variable tNoteNumsOn as String
   variable tNoteNamesOn as String
   variable tNotesOn as List
   split mChordFormula by "," into tListOfString
   put tListOfString parsed as list of number into tListOfNum
   repeat for each element tNum in tListOfNum
      if pKeyNum + tNum < 128 and pKeyNum + tNum > -1 then
         push pKeyNum + tNum onto tChordNoteNums
      end if
   end repeat
   repeat for each element tNum in tChordNoteNums
      put getOctaveFromNoteNumber(tNum) into tOctNum
      put element tOctNum of mOctaveList into tOctave
      if tNum is in tOctave["OctaveBlackKeysIndex"] then
         put tOctave["OctaveBlackKeysList"] into tKeysList
         repeat with tCounter from 1 up to 5
            put element tCounter of tKeysList into tKey
            if tKey["KeyNumber"] is tNum then
               put "," &  tKey["KeyName"] & tOctave["OctaveName"] after tNoteNamesOn
               put "," & tKey["KeyNumber"] formatted as string after tNoteNumsOn
               put true into tKey["KeyHighlighted"]
               put tKey into element tCounter of tKeysList
            end if
         end repeat
         put tKeysList into tOctave["OctaveBlackKeysList"]
         put tOctave into element tOctNum of mOctaveList
      else
         if tNum is in tOctave["OctaveWhiteKeysIndex"] then
            put tOctave["OctaveWhiteKeysList"] into tKeysList
            repeat with tCounter from 1 up to 7
               put tKeysList[tCounter] into tKey
               if tKey["KeyNumber"] is tNum then
                  put "," & tKey["KeyName"] & tOctave["OctaveName"] after tNoteNamesOn
                  put "," & tKey["KeyNumber"] formatted as string after tNoteNumsOn
                  put true into tKey["KeyHighlighted"]
                  put tKey into tKeysList[tCounter]
               end if
            end repeat
            put tKeysList into tOctave["OctaveWhiteKeysList"]
            put tOctave into element tOctNum of mOctaveList
         end if
      end if
   end repeat
   -- log tNoteNumsOn
   -- log tNoteNamesOn
   push tNoteNumsOn onto tNotesOn
   push tNoteNamesOn onto tNotesOn
   return tNotesOn
end handler

public handler getOctaveFromNoteNumber(in pNoteNum as Integer) returns optional any
   if pNoteNum < 12 then
      return 1
   end if
   if pNoteNum>11 and pNoteNum<24 then
      return 2
   end if
   if pNoteNum>23 and pNoteNum<36 then
      return 3
   end if
   if pNoteNum>35 and pNoteNum<48 then
      return 4
   end if
   if pNoteNum>47 and pNoteNum<60 then
      return 5
   end if
   if pNoteNum>59 and pNoteNum<72 then
      return 6
   end if
   if pNoteNum>71 and pNoteNum<84 then
      return 7
   end if
   if pNoteNum>83 and pNoteNum<96 then
      return 8
   end if
   if pNoteNum>95 and pNoteNum<108 then
      return 9
   end if
   if pNoteNum>107 and pNoteNum<120 then
      return 10
   end if
   if pNoteNum>119 and pNoteNum<128 then
      return 11
   end if
end handler
-----------------------------------------------------------------------------------------------  Creating & Drawing --------------------------------------------------------------------------------------
--- called when widget is created
public handler OnCreate()
   -- OctaveList
   --    OctaveName
   --    OctaveNumber
   --    OctaveBlackKeysIndex
   --    OctaveWhiteKeysIndex
   --    BlackKeysList
   --       KeyName
   --       KeyNumber
   --       KeyPath
   --       KeyHighlighted
   --    WhiteKeysList
   --       KeyName
   --       KeyNumber
   --       KeyPath
   --       KeyHighlighted

	put stringToColor("0,255,0") into mHiliteColor
   put 11 into mOctaves
   put 1 into mStrokeSize
   put nothing into mSelectedKey
   put false into mPianoMouseButtonDown
   variable tBlackKeysList as List
   variable tWhiteKeysList as List
   variable tArray as Array
   variable tBlackKeyPath as Path
   put path "M0,0v81.841C0,81.841,0,84,2.679,84h8.642c0,0,2.679,0,2.679-2.159V0H0z" into tBlackKeyPath -- BlackKeys all have identical shape
   variable tPath as Path
	variable tWhiteKey as Array
	variable tBlackKey as Array

   variable tOctaveWidth as Number
   variable tWhiteKeySpacing as Number
   variable tBlackKeySpacing as Number
   variable tOctaveIteration as Number

   variable tHalfStrokeOffset as Number
   variable tMyWidthMinusStroke as Number
   variable tMyHeightMinusStroke as Number

   -- put 1 into mStrokeSize
   put mStrokeSize / 2 into tHalfStrokeOffset
   put my width - (mStrokeSize) into tMyWidthMinusStroke
   put my height - (mStrokeSize) into tMyHeightMinusStroke

   put tMyWidthMinusStroke / mOctaves into tOctaveWidth
   put tMyWidthMinusStroke /7 / mOctaves into tWhiteKeySpacing
   put tMyWidthMinusStroke /12 / mOctaves into tBlackKeySpacing

   repeat with tOctaveIteration from 0 up to 10
      ----------------------------------------------------------------------------------------------------------------Octave 0----------------------------------------------------------------------------------------
      put the empty array into tArray
      put the empty list into tBlackKeysList
      put the empty list into tWhiteKeysList
      --------------------------------------------White Keys--------------------------------------------
   	put "C" into tArray["KeyName"]
   	put path "M16.679,84C14,84,14,81.841,14,81.841V0H0v126.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103 V84H16.679z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [0 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 0 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "D" into tArray["KeyName"]
   	put path "M20.679,84C18,84,18,81.841,18,81.841V0H4v81.841C4,84,1.321,84,1.321,84H0v42.897c0,0,0,3.103,3.827,3.103	h16.346c0,0,3.827,0,3.827-3.103V84H20.679z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 2 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "E" into tArray["KeyName"]
   	put path "M8,0v81.841C8,84,5.321,84,5.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V0H8z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*2  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 4 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "F" into tArray["KeyName"]
   	put path "M23.321,84h-8.642C12,84,12,81.841,12,81.841V0H0v126.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V83.922C23.612,83.998,23.321,84,23.321,84z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*3  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 5 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "G" into tArray["KeyName"]
   	put path "M18.679,84C16,84,16,81.841,16,81.841V0H2v81.841c0,1.45-1.206,1.924-2,2.081v42.975c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V84H18.679z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*4  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 7 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "A" into tArray["KeyName"]
   	put path "M22.679,84C20,84,20,81.841,20,81.841V0H6v81.841C6,84,3.321,84,3.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V84H22.679z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*5  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 9 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
   	put "B" into tArray["KeyName"]
   	put path "M10,0v81.841C10,84,7.321,84,7.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V0H10z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*6 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 11 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tWhiteKeysList
      --------------------------------------------Black Keys--------------------------------------------
      put the empty array into tArray

   	put "C#Db" into tArray["KeyName"]
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 1 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tBlackKeysList
   	put "D#Eb" into tArray["KeyName"]
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*3 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 3 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tBlackKeysList
   	put "F#Gb" into tArray["KeyName"]
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*6 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 6 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tBlackKeysList
   	put "G#Ab" into tArray["KeyName"]
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*8 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 8 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tBlackKeysList
   	put "A#Bb" into tArray["KeyName"]
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*10 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tArray["KeyPath"]
   	put false into tArray["KeyHighlighted"]
   	put 10 + (tOctaveIteration * 12) into tArray["KeyNumber"]
   	push tArray onto tBlackKeysList
      --------------------------------------------- Octave --------------------------------------------
      put the empty array into tArray

      put (tOctaveIteration -1) formatted as string into tArray["OctaveName"]
      put 1 +tOctaveIteration into tArray["OctaveNumber"]
      put path "" into tArray["OctaveBackgroundPath"]
      put tBlackKeysList into tArray["OctaveBlackKeysList"]
      put tWhiteKeysList into tArray["OctaveWhiteKeysList"]
      put [1 + (tOctaveIteration * 12), 3 + (tOctaveIteration * 12), 6 + (tOctaveIteration * 12), 8 + (tOctaveIteration * 12), 10 + (tOctaveIteration * 12)] into tArray["OctaveBlackKeysIndex"]
      put [0 + (tOctaveIteration * 12), 2 + (tOctaveIteration * 12), 4 + (tOctaveIteration * 12), 5 + (tOctaveIteration * 12), 7 + (tOctaveIteration * 12), 9 + (tOctaveIteration * 12), 11 + (tOctaveIteration * 12)] into tArray["OctaveWhiteKeysIndex"]
      push tArray onto mOctaveList
   end repeat

end handler

public handler OnGeometryChanged()
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
	variable tWhiteKey as Array
	variable tPath as Path
   variable tBlackKeyPath as Path
   put path "M0,0v81.841C0,81.841,0,84,2.679,84h8.642c0,0,2.679,0,2.679-2.159V0H0z" into tBlackKeyPath -- BlackKeys all have identical shape

   variable tOctaveIteration as Number
   variable tOctaveWidth as Number
   variable tWhiteKeySpacing as Number
   variable tBlackKeySpacing as Number
   variable tHalfStrokeOffset as Number
   variable tMyWidthMinusStroke as Number
   variable tMyHeightMinusStroke as Number

   -- put 1 into mStrokeSize
   put mStrokeSize / 2 into tHalfStrokeOffset
   put my width - (mStrokeSize) into tMyWidthMinusStroke
   put my height - (mStrokeSize) into tMyHeightMinusStroke
   put tMyWidthMinusStroke / mOctaves into tOctaveWidth
   put tMyWidthMinusStroke /7 / mOctaves into tWhiteKeySpacing
   put tMyWidthMinusStroke /12 / mOctaves into tBlackKeySpacing

   repeat with tOctaveIteration from 0 up to 10 -- mOctaves-1
      put element (tOctaveIteration+1) of mOctaveList into tOctave
   	------------------------------------------------------------------------------------------ WhiteKeys ------------------------------------------------------------------------------------------
      put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
      ------------------------------------------------------------------------------------------------------------------ C
   	put element 1 of tWhiteKeysList into tWhiteKey
      put path "M16.679,84C14,84,14,81.841,14,81.841V0H0v126.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103 V84H16.679z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [0 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 1 of tWhiteKeysList
   	----------------------0-------------------------------------------------------------------------------------------- D
   	put element 2 of tWhiteKeysList into tWhiteKey
      put path "M20.679,84C18,84,18,81.841,18,81.841V0H4v81.841C4,84,1.321,84,1.321,84H0v42.897c0,0,0,3.103,3.827,3.103	h16.346c0,0,3.827,0,3.827-3.103V84H20.679z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 2 of tWhiteKeysList
   	--------------------------------------------------------------------------------------------------- --------------- E
   	put element 3 of tWhiteKeysList into tWhiteKey
      put path "M8,0v81.841C8,84,5.321,84,5.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V0H8z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*2  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 3 of tWhiteKeysList
   	------------------------------------------------------------------------------------------------------------------ F
   	put element 4 of tWhiteKeysList into tWhiteKey
      put path "M23.321,84h-8.642C12,84,12,81.841,12,81.841V0H0v126.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V83.922C23.612,83.998,23.321,84,23.321,84z" into tPath
      scale tPath by [(tOctaveWidth /7) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*3  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 4 of tWhiteKeysList
   	------------------------------------------------------------------------------------------------------------------ G
   	put element 5 of tWhiteKeysList into tWhiteKey
      put path "M18.679,84C16,84,16,81.841,16,81.841V0H2v81.841c0,1.45-1.206,1.924-2,2.081v42.975c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V84H18.679z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*4  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 5 of tWhiteKeysList
   	------------------------------------------------------------------------------------------------------------------ A
   	put element 6 of tWhiteKeysList into tWhiteKey
      put path "M22.679,84C20,84,20,81.841,20,81.841V0H6v81.841C6,84,3.321,84,3.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V84H22.679z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*5  + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 6 of tWhiteKeysList
   	------------------------------------------------------------------------------------------------------------------ B
   	put element 7 of tWhiteKeysList into tWhiteKey
      put path "M10,0v81.841C10,84,7.321,84,7.321,84H0v42.897c0,0,0,3.103,3.827,3.103h16.346c0,0,3.827,0,3.827-3.103V0H10z" into tPath
      scale tPath by [(tOctaveWidth /7)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)]
      translate tPath by [tWhiteKeySpacing*6 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tWhiteKey["KeyPath"]
      put tWhiteKey into element 7 of tWhiteKeysList
   	------------------------------------------------------------------------------------------ Black Keys ------------------------------------------------------------------------------------------
      put tOctave["OctaveBlackKeysList"] into tBlackKeysList
      ------------------------------------------------------------------------------------------------------------------ C#Db
   	put element 1 of tBlackKeysList into tBlackKey
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tBlackKey["KeyPath"]
   	put tBlackKey into element 1 of tBlackKeysList
   	------------------------------------------------------------------------------------------------------------------ D#Eb
   	put element 2 of tBlackKeysList into tBlackKey
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12)/ the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*3 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tBlackKey["KeyPath"]
   	put tBlackKey into element 2 of tBlackKeysList
   	------------------------------------------------------------------------------------------------------------------ F#Gb
   	put element 3 of tBlackKeysList into tBlackKey
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*6 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tBlackKey["KeyPath"]
      put tBlackKey into element 3 of tBlackKeysList
   	------------------------------------------------------------------------------------------------------------------ G#Ab
   	put element 4 of tBlackKeysList into tBlackKey
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*8 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tBlackKey["KeyPath"]
      put tBlackKey into element 4 of tBlackKeysList
   	------------------------------------------------------------------------------------------------------------------ A#Bb
   	put element 5 of tBlackKeysList into tBlackKey
   	put tBlackKeyPath into tPath
      scale tPath by [(tOctaveWidth /12) / the width of the bounding box of tPath, (tMyHeightMinusStroke / the height of the bounding box of tPath)*0.64615384615385]
      translate tPath by [tBlackKeySpacing*10 + (tOctaveIteration * tOctaveWidth) +tHalfStrokeOffset, tHalfStrokeOffset]
      put tPath into tBlackKey["KeyPath"]
      put tBlackKey into element 5 of tBlackKeysList
       ----------------------------------------- replace elements in octave -------------------------------------------------
       put tWhiteKeysList into tOctave["OctaveWhiteKeysList"]
       put tBlackKeysList into tOctave["OctaveBlackKeysList"]
       ----------------------------------- replace octave in mOctaveList ----------------------------------------------------
       put tOctave into element tOctaveIteration+1 of mOctaveList
       ------------------------------------------
    end repeat
    redraw all
end handler
--------------------------------------------------------------------------------------------------------------
-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
   variable tOctave as Array
   variable tBlackKeysList as List
   variable tBlackKey as Array
   variable tWhiteKeysList as List
	variable tWhiteKey as Array
	variable tPath as Path
   variable tOctaveIteration as Number
   set the antialias of this canvas to true
   set the stroke width of this canvas to mStrokeSize
   repeat with tOctaveIteration from 1 up to mOctaves
      put element (tOctaveIteration) of mOctaveList into tOctave
   	------------------------------------------------------------------------------------------ WhiteKeys ------------------------------------------------------------------------------------------
      put tOctave["OctaveWhiteKeysList"] into tWhiteKeysList
      ------------------------------------------------------------------------------------------------------------------ C
   	put element 1 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ D
   	put element 2 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ E
   	put element 3 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ F
   	put element 4 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
      fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ G
   	put element 5 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ A
   	put element 6 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ B
   	put element 7 of tWhiteKeysList into tWhiteKey
   	if tWhiteKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [1,1,1,1]
   	end if
   	put tWhiteKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------ Black Keys ------------------------------------------------------------------------------------------
      put tOctave["OctaveBlackKeysList"] into tBlackKeysList
      ------------------------------------------------------------------------------------------------------------------ C#Db
   	put element 1 of tBlackKeysList into tBlackKey
   	if tBlackKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [0,0,0,1]
   	end if
   	put tBlackKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
      ------------------------------------------------------------------------------------------------------------------ D#Eb
   	put element 2 of tBlackKeysList into tBlackKey
   	if tBlackKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [0,0,0,1]
   	end if
   	put tBlackKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ F#Gb
   	put element 3 of tBlackKeysList into tBlackKey
   	if tBlackKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [0,0,0,1]
   	end if
   	put tBlackKey["KeyPath"] into tPath
      fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ G#Ab
   	put element 4 of tBlackKeysList into tBlackKey
   	if tBlackKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [0,0,0,1]
   	end if
   	put tBlackKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   	------------------------------------------------------------------------------------------------------------------ A#Bb
   	put element 5 of tBlackKeysList into tBlackKey
   	if tBlackKey["KeyHighlighted"] then
   		set the paint of this canvas to solid paint with mHiliteColor
   	else
   		set the paint of this canvas to solid paint with color [0,0,0,1]
   	end if
   	put tBlackKey["KeyPath"] into tPath
   	fill tPath on this canvas
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke tPath on this canvas
   end repeat
end handler

-- this handler is called when a card containg the widget is opened
public handler OnOpen()
   OnGeometryChanged()
   redraw all
end handler

end widget
